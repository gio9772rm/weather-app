name: Cloud Weather Ingest

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/10 * * * *"

permissions:
  contents: read

concurrency:
  group: cloud-ingest
  cancel-in-progress: false

jobs:
  ingest:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    env:
      # Opzionali generali
      ECOWITT_TZ: Europe/Rome
      BACKFILL_HOURS: "0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ingest.txt   # <-- verifica il nome del file nel repo

      - name: Prepare runtime (solo se usi SQLite)
        run: mkdir -p ./data

      - name: Preflight env
        env:
          ECOWITT_APP_KEY: ${{ secrets.ECOWITT_APP_KEY }}
          ECOWITT_APPLICATION_KEY: ${{ secrets.ECOWITT_APP_KEY }}   # compatibilità
          ECOWITT_API_KEY: ${{ secrets.ECOWITT_API_KEY }}
          ECOWITT_MAC: ${{ secrets.ECOWITT_MAC }}
        run: |
          for k in ECOWITT_APP_KEY ECOWITT_APPLICATION_KEY ECOWITT_API_KEY ECOWITT_MAC; do
            if [ -z "${!k}" ]; then echo "::error::$k NON impostata"; exit 2; else echo "$k OK"; fi
          done

      - name: Run Ecowitt Cloud ingest
        env:
          # Se usi Postgres, inserisci la secret e togli SQLite
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SQLITE_PATH: ./data/weather.db

          ECOWITT_APP_KEY: ${{ secrets.ECOWITT_APP_KEY }}
          ECOWITT_APPLICATION_KEY: ${{ secrets.ECOWITT_APP_KEY }}   # compatibilità
          ECOWITT_API_KEY: ${{ secrets.ECOWITT_API_KEY }}
          ECOWITT_MAC: ${{ secrets.ECOWITT_MAC }}

          ECOWITT_TZ: Europe/Rome
          BACKFILL_HOURS: "0"
        run: python weather_ingest_ecowitt_cloud.py

          BACKFILL_HOURS: "0"
        run: |
          python weather_ingest_ecowitt_cloud.py
